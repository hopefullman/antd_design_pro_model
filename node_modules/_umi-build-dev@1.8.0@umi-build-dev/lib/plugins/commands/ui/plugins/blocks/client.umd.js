(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('dva')) :
	typeof define === 'function' && define.amd ? define(['react', 'dva'], factory) :
	(global = global || self, (global.g_umiUIPlugins = global.g_umiUIPlugins || {}, global.g_umiUIPlugins.blocks = factory(global.React, global.dva)));
}(this, function (React, dva) { 'use strict';

	React = React && React.hasOwnProperty('default') ? React['default'] : React;

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var model = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _default = {
	  namespace: 'blocks',
	  state: {
	    data: []
	  },
	  subscriptions: {
	    setup({
	      history
	    }) {
	      return history.listen(({
	        pathname
	      }) => {
	        if (pathname === '/blocks') {
	          window.socketReady(() => {
	            window.send('blocks/fetch');
	          });
	        }
	      });
	    }

	  },
	  reducers: {
	    save(state, {
	      payload
	    }) {
	      return _objectSpread({}, state, {
	        data: payload
	      });
	    }

	  }
	};
	exports.default = _default;
	});

	var model$1 = unwrapExports(model);

	var BlocksViewer = dva.connect(function (state) {
	  return {
	    blocks: state.blocks
	  };
	})(function (props) {
	  function addHandler(name) {
	    window.send('blocks', [name]);
	  }

	  return React.createElement("div", null, React.createElement("h2", null, "Search"), React.createElement("h2", null, "List"), React.createElement("ul", null, props.blocks.data.map(function (item) {
	    return React.createElement("li", {
	      key: item.name
	    }, item.name, React.createElement("button", {
	      onClick: addHandler.bind(null, item.name)
	    }, "add"));
	  })));
	});
	var client = (function (api) {
	  api.addPanel({
	    title: 'Blocks Viewer',
	    path: '/blocks',
	    component: BlocksViewer,
	    models: [model$1]
	  });
	});

	return client;

}));
